@typeparam TItem
@typeparam TValue
@typeparam TDisplay
<select size="@Size" class="form-control" @bind="@SelectedValue">
    @ChildContent
    @if (ValueSelector !=null && DisplaySelector !=null )
    {
        foreach (var item in Items)
        {
            bool isSelected = Selected != null && ValueSelector(item).Equals(ValueSelector(Selected));
            <option value="@ValueSelector(item)" selected="@isSelected">@DisplaySelector(item)</option>
        }
    }
</select>

@code {
    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public Func<TItem, TValue>? ValueSelector { get; set; }
    [Parameter]
    public Func<TItem, TDisplay>? DisplaySelector { get; set; }
    private TValue? selectedValue { get; set; }
    public TValue? SelectedValue
    {
        get => selectedValue;
        set
        {
            selectedValue = value;
            if ( ValueSelector == null || value == null)
                return;
            string? sValue = value.ToString();
            if (sValue == null)
                return;
            Selected = Items.FirstOrDefault(i => sValue.Equals(ValueSelector(i)?.ToString()) == true );
            SelectedChanged.InvokeAsync(Selected);
        }
    }
    [Parameter]
    public TItem? Selected { get; set; }
    [Parameter]
    public EventCallback<TItem> SelectedChanged { get; set; }
    [Parameter]
    public int Size { get; set; } = 1;
}
